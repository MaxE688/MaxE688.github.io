{
  "version": 3,
  "sources": ["../../jquery-breakpoints/jquery.breakpoints.js"],
  "sourcesContent": ["/*\n * @license jQuery Breakpoints | MIT | Jerry Low | https://www.github.com/jerrylow/breakpoints\n */\n\n(function($) {\n  var Breakpoints = function(el, options) {\n    var _ = this;\n\n    _.n = \"breakpoints\";\n    _.settings = {};\n    _.currentBp = null;\n\n    _.getBreakpoint = function() {\n      var winW = _windowWidth();\n      var bps = _.settings.breakpoints;\n      var bpName;\n\n      bps.forEach(function(bp) {\n        if (winW >= bp.width) {\n          bpName = bp.name;\n        }\n      });\n\n      // Fallback to largest breakpoint.\n      if (!bpName) {\n        bpName = bps[bps.length - 1].name;\n      }\n\n      return bpName;\n    };\n\n    _.getBreakpointWidth = function(bpName) {\n      var bps = _.settings.breakpoints;\n      var bpWidth;\n\n      bps.forEach(function(bp) {\n        if (bpName == bp.name) {\n          bpWidth = bp.width;\n        }\n      });\n\n      return bpWidth;\n    };\n\n    _.compareCheck = function(check, checkBpName, callback) {\n      var winW = _windowWidth();\n      var bps = _.settings.breakpoints;\n      var bpWidth = _.getBreakpointWidth(checkBpName);\n      var isBp = false;\n\n      switch (check) {\n        case \"lessThan\":\n          isBp = winW < bpWidth;\n          break;\n        case \"lessEqualTo\":\n          isBp = winW <= bpWidth;\n          break;\n        case \"greaterThan\":\n          isBp = winW > bpWidth;\n          break;\n        case \"greaterEqualTo\":\n          isBp = winW > bpWidth;\n          break;\n        case \"inside\":\n          var bpIndex = bps.findIndex(function(bp) {\n            return bp.name === checkBpName;\n          });\n\n          if (bpIndex === bps.length - 1) {\n            isBp = winW > bpWidth;\n          } else {\n            var nextBpWidth = _.getBreakpointWidth(bps[bpIndex + 1].name);\n            isBp = winW >= bpWidth && winW < nextBpWidth;\n          }\n          break;\n      }\n\n      if (isBp) {\n        callback();\n      }\n    };\n\n    _.destroy = function() {\n      $(window).unbind(_.n);\n    };\n\n    var _compareTrigger = function() {\n      var winW = _windowWidth();\n      var bps = _.settings.breakpoints;\n      var currentBp = _.currentBp;\n\n      bps.forEach(function(bp) {\n        if (currentBp === bp.name) {\n          if (!bp.inside) {\n            $(window).trigger('inside-' + bp.name);\n            bp.inside = true;\n          }\n        } else {\n          bp.inside = false;\n        }\n\n        if (winW < bp.width) {\n          if (!bp.less) {\n            $(window).trigger('lessThan-' + bp.name);\n            bp.less = true;\n            bp.greater = false;\n            bp.greaterEqual = false;\n          }\n        }\n\n        if (winW >= bp.width) {\n          if (!bp.greaterEqual) {\n            $(window).trigger('greaterEqualTo-' + bp.name);\n            bp.greaterEqual = true;\n            bp.less = false;\n          }\n\n          if (winW > bp.width) {\n            if (!bp.greater) {\n              $(window).trigger('greaterThan-' + bp.name);\n              bp.greater = true;\n              bp.less = false;\n            }\n          }\n        }\n      });\n    };\n\n    var _windowWidth = function() {\n      var win = $(window);\n\n      if (_.outerWidth) {\n        return win.outerWidth();\n      }\n\n      return window.innerWidth ? window.innerWidth : win.width();\n    }\n\n    var _resizeCallback = function() {\n      var newBp = _.getBreakpoint();\n\n      if (newBp !== _.currentBp) {\n        $(window).trigger({\n          \"type\" : \"breakpoint-change\",\n          \"from\" : _.currentBp,\n          \"to\" : newBp\n        });\n\n        _.currentBp = newBp;\n      }\n    };\n\n    // Initiate\n    var settings = $.extend({}, $.fn.breakpoints.defaults, options);\n    _.settings = {\n      breakpoints: settings.breakpoints,\n      buffer: settings.buffer,\n      triggerOnInit: settings.triggerOnInit,\n      outerWidth: settings.outerWidth\n    };\n\n    el.data(_.n, this);\n    _.currentBp = _.getBreakpoint();\n\n    var resizeThresholdTimerId = null;\n\n    if ($.isFunction($(window).on)) {\n      $(window).on(\"resize.\" + _.n, function(e) {\n        if (resizeThresholdTimerId) {\n          clearTimeout(resizeThresholdTimerId);\n        }\n\n        resizeThresholdTimerId = setTimeout(function(e) {\n          _resizeCallback();\n          _compareTrigger();\n        }, _.settings.buffer);\n      });\n    }\n\n    if (_.settings.triggerOnInit) {\n      setTimeout(function() {\n        $(window).trigger({\n          \"type\": \"breakpoint-change\",\n          \"from\": _.currentBp,\n          \"to\": _.currentBp,\n          \"initialInit\": true\n        });\n      }, _.settings.buffer);\n    }\n\n    setTimeout(function() {\n      _compareTrigger();\n    }, 0);\n  };\n\n  $.fn.breakpoints = function(method, arg1, arg2) {\n    if (this.data(\"breakpoints\")) {\n      var thisBp = this.data(\"breakpoints\");\n      var compareMethods = [\n        \"lessThan\",\n        \"lessEqualTo\",\n        \"greaterThan\",\n        \"greaterEqualTo\",\n        \"inside\"\n      ];\n\n      if (method === \"getBreakpoint\") {\n        return thisBp.getBreakpoint();\n      } else if (method === \"getBreakpointWidth\") {\n        return thisBp.getBreakpointWidth(arg1);\n      } else if (compareMethods.indexOf(method) >= 0) {\n        return thisBp.compareCheck(method, arg1, arg2);\n      } else if (method === \"destroy\") {\n        thisBp.destroy();\n      }\n\n      return;\n    }\n\n    new Breakpoints(this, method);\n  };\n\n  $.fn.breakpoints.defaults = {\n    breakpoints: [\n      {\"name\": \"xs\", \"width\": 0},\n      {\"name\": \"sm\", \"width\": 768},\n      {\"name\" : \"md\", \"width\": 992},\n      {\"name\" : \"lg\", \"width\": 1200}\n    ],\n    buffer: 300,\n    triggerOnInit: false,\n    outerWidth: false\n  };\n})(jQuery);\n"],
  "mappings": "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",
  "names": ["e"]
}
