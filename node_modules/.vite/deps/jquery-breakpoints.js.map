{
  "version": 3,
  "sources": ["../../jquery-breakpoints/jquery.breakpoints.js"],
  "sourcesContent": ["/*\r\n * @license jQuery Breakpoints | MIT | Jerry Low | https://www.github.com/jerrylow/breakpoints\r\n */\r\n\r\n(function($) {\r\n  var Breakpoints = function(el, options) {\r\n    var _ = this;\r\n\r\n    _.n = \"breakpoints\";\r\n    _.settings = {};\r\n    _.currentBp = null;\r\n\r\n    _.getBreakpoint = function() {\r\n      var winW = _windowWidth();\r\n      var bps = _.settings.breakpoints;\r\n      var bpName;\r\n\r\n      bps.forEach(function(bp) {\r\n        if (winW >= bp.width) {\r\n          bpName = bp.name;\r\n        }\r\n      });\r\n\r\n      // Fallback to largest breakpoint.\r\n      if (!bpName) {\r\n        bpName = bps[bps.length - 1].name;\r\n      }\r\n\r\n      return bpName;\r\n    };\r\n\r\n    _.getBreakpointWidth = function(bpName) {\r\n      var bps = _.settings.breakpoints;\r\n      var bpWidth;\r\n\r\n      bps.forEach(function(bp) {\r\n        if (bpName == bp.name) {\r\n          bpWidth = bp.width;\r\n        }\r\n      });\r\n\r\n      return bpWidth;\r\n    };\r\n\r\n    _.compareCheck = function(check, checkBpName, callback) {\r\n      var winW = _windowWidth();\r\n      var bps = _.settings.breakpoints;\r\n      var bpWidth = _.getBreakpointWidth(checkBpName);\r\n      var isBp = false;\r\n\r\n      switch (check) {\r\n        case \"lessThan\":\r\n          isBp = winW < bpWidth;\r\n          break;\r\n        case \"lessEqualTo\":\r\n          isBp = winW <= bpWidth;\r\n          break;\r\n        case \"greaterThan\":\r\n          isBp = winW > bpWidth;\r\n          break;\r\n        case \"greaterEqualTo\":\r\n          isBp = winW > bpWidth;\r\n          break;\r\n        case \"inside\":\r\n          var bpIndex = bps.findIndex(function(bp) {\r\n            return bp.name === checkBpName;\r\n          });\r\n\r\n          if (bpIndex === bps.length - 1) {\r\n            isBp = winW > bpWidth;\r\n          } else {\r\n            var nextBpWidth = _.getBreakpointWidth(bps[bpIndex + 1].name);\r\n            isBp = winW >= bpWidth && winW < nextBpWidth;\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (isBp) {\r\n        callback();\r\n      }\r\n    };\r\n\r\n    _.destroy = function() {\r\n      $(window).unbind(_.n);\r\n    };\r\n\r\n    var _compareTrigger = function() {\r\n      var winW = _windowWidth();\r\n      var bps = _.settings.breakpoints;\r\n      var currentBp = _.currentBp;\r\n\r\n      bps.forEach(function(bp) {\r\n        if (currentBp === bp.name) {\r\n          if (!bp.inside) {\r\n            $(window).trigger('inside-' + bp.name);\r\n            bp.inside = true;\r\n          }\r\n        } else {\r\n          bp.inside = false;\r\n        }\r\n\r\n        if (winW < bp.width) {\r\n          if (!bp.less) {\r\n            $(window).trigger('lessThan-' + bp.name);\r\n            bp.less = true;\r\n            bp.greater = false;\r\n            bp.greaterEqual = false;\r\n          }\r\n        }\r\n\r\n        if (winW >= bp.width) {\r\n          if (!bp.greaterEqual) {\r\n            $(window).trigger('greaterEqualTo-' + bp.name);\r\n            bp.greaterEqual = true;\r\n            bp.less = false;\r\n          }\r\n\r\n          if (winW > bp.width) {\r\n            if (!bp.greater) {\r\n              $(window).trigger('greaterThan-' + bp.name);\r\n              bp.greater = true;\r\n              bp.less = false;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    var _windowWidth = function() {\r\n      var win = $(window);\r\n\r\n      if (_.outerWidth) {\r\n        return win.outerWidth();\r\n      }\r\n\r\n      return window.innerWidth ? window.innerWidth : win.width();\r\n    }\r\n\r\n    var _resizeCallback = function() {\r\n      var newBp = _.getBreakpoint();\r\n\r\n      if (newBp !== _.currentBp) {\r\n        $(window).trigger({\r\n          \"type\" : \"breakpoint-change\",\r\n          \"from\" : _.currentBp,\r\n          \"to\" : newBp\r\n        });\r\n\r\n        _.currentBp = newBp;\r\n      }\r\n    };\r\n\r\n    // Initiate\r\n    var settings = $.extend({}, $.fn.breakpoints.defaults, options);\r\n    _.settings = {\r\n      breakpoints: settings.breakpoints,\r\n      buffer: settings.buffer,\r\n      triggerOnInit: settings.triggerOnInit,\r\n      outerWidth: settings.outerWidth\r\n    };\r\n\r\n    el.data(_.n, this);\r\n    _.currentBp = _.getBreakpoint();\r\n\r\n    var resizeThresholdTimerId = null;\r\n\r\n    if ($.isFunction($(window).on)) {\r\n      $(window).on(\"resize.\" + _.n, function(e) {\r\n        if (resizeThresholdTimerId) {\r\n          clearTimeout(resizeThresholdTimerId);\r\n        }\r\n\r\n        resizeThresholdTimerId = setTimeout(function(e) {\r\n          _resizeCallback();\r\n          _compareTrigger();\r\n        }, _.settings.buffer);\r\n      });\r\n    }\r\n\r\n    if (_.settings.triggerOnInit) {\r\n      setTimeout(function() {\r\n        $(window).trigger({\r\n          \"type\": \"breakpoint-change\",\r\n          \"from\": _.currentBp,\r\n          \"to\": _.currentBp,\r\n          \"initialInit\": true\r\n        });\r\n      }, _.settings.buffer);\r\n    }\r\n\r\n    setTimeout(function() {\r\n      _compareTrigger();\r\n    }, 0);\r\n  };\r\n\r\n  $.fn.breakpoints = function(method, arg1, arg2) {\r\n    if (this.data(\"breakpoints\")) {\r\n      var thisBp = this.data(\"breakpoints\");\r\n      var compareMethods = [\r\n        \"lessThan\",\r\n        \"lessEqualTo\",\r\n        \"greaterThan\",\r\n        \"greaterEqualTo\",\r\n        \"inside\"\r\n      ];\r\n\r\n      if (method === \"getBreakpoint\") {\r\n        return thisBp.getBreakpoint();\r\n      } else if (method === \"getBreakpointWidth\") {\r\n        return thisBp.getBreakpointWidth(arg1);\r\n      } else if (compareMethods.indexOf(method) >= 0) {\r\n        return thisBp.compareCheck(method, arg1, arg2);\r\n      } else if (method === \"destroy\") {\r\n        thisBp.destroy();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    new Breakpoints(this, method);\r\n  };\r\n\r\n  $.fn.breakpoints.defaults = {\r\n    breakpoints: [\r\n      {\"name\": \"xs\", \"width\": 0},\r\n      {\"name\": \"sm\", \"width\": 768},\r\n      {\"name\" : \"md\", \"width\": 992},\r\n      {\"name\" : \"lg\", \"width\": 1200}\r\n    ],\r\n    buffer: 300,\r\n    triggerOnInit: false,\r\n    outerWidth: false\r\n  };\r\n})(jQuery);\r\n"],
  "mappings": "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",
  "names": ["e"]
}
